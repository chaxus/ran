import{_ as e,o as a,c as d,a3 as r}from"./chunks/framework.BYE6xntm.js";const u=JSON.parse('{"title":"r-player","description":"","frontmatter":{},"headers":[],"relativePath":"src/ranui/player/index.md","filePath":"src/ranui/player/index.md","lastUpdated":1728827597000}'),i={name:"src/ranui/player/index.md"};function n(o,t,l,s,h,p){return a(),d("div",{"data-pagefind-body":!0},t[0]||(t[0]=[r('<h1 id="r-player" tabindex="-1">r-player <a class="header-anchor" href="#r-player" aria-label="Permalink to &quot;r-player&quot;">​</a></h1><p>Video player</p><p>Based on &#39;hlsjs&#39; and&#39; web components&#39;, let the native tag &#39;r-player&#39; have a unified video control. Do not use the &#39;new Player(options)&#39; way to mount to the specified &#39;dom&#39;, view return view, logic return logic, see and get, more intuitive.</p><ol><li>Drag and drop the progress bar</li><li>Volume control</li><li>The bitrate is automatically switched based on the current bandwidth</li><li>Manual definition switch</li><li>Play at double speed</li><li>Style custom overlay</li><li>&#39;hls&#39; protocol standard encryption video playback</li><li>Based on native development, it can run in all frameworks and unify the cross-framework situation</li><li>Unified browser controls</li></ol><h2 id="code-demo" tabindex="-1">Code demo <a class="header-anchor" href="#code-demo" aria-label="Permalink to &quot;Code demo&quot;">​</a></h2><r-player style="display:block;width:100%;max-width:600px;height:300px;" src="/ran/hls/example.m3u8"></r-player><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">r-player</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/ran/hls/example.m3u8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">r-player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="attribute" tabindex="-1">Attribute <a class="header-anchor" href="#attribute" aria-label="Permalink to &quot;Attribute&quot;">​</a></h2><h3 id="src" tabindex="-1">src <a class="header-anchor" href="#src" aria-label="Permalink to &quot;src&quot;">​</a></h3><p>Resource address of the video</p><h3 id="volume" tabindex="-1">volume <a class="header-anchor" href="#volume" aria-label="Permalink to &quot;volume&quot;">​</a></h3><p>Set the initial volume. The default is 0.5</p><h3 id="currenttime" tabindex="-1">currentTime <a class="header-anchor" href="#currenttime" aria-label="Permalink to &quot;currentTime&quot;">​</a></h3><p>Set the initial playback time. By default, the playback starts from the beginning</p><h3 id="playbackrate" tabindex="-1">playbackRate <a class="header-anchor" href="#playbackrate" aria-label="Permalink to &quot;playbackRate&quot;">​</a></h3><p>Set the double speed. The default is 1.0</p><h3 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;debug&quot;">​</a></h3><p>console.log some info</p><h2 id="event" tabindex="-1"><code>event</code> <a class="header-anchor" href="#event" aria-label="Permalink to &quot;`event`&quot;">​</a></h2><h3 id="onchange" tabindex="-1">onchange <a class="header-anchor" href="#onchange" aria-label="Permalink to &quot;onchange&quot;">​</a></h3><p>Listen for any player changes, and the value returned is as follows.</p><p>An &#39;instance of the player&#39; can be obtained through this method.</p><p>Live by &#39;type&#39; to judge different event types, perform different operations</p><table tabindex="0"><thead><tr><th>property</th><th>explains that</th><th>is of type</th></tr></thead><tbody><tr><td>type</td><td>Indicates the type of the changed event</td><td>&#39;string&#39;</td></tr><tr><td>data</td><td>The value of the</td><td>&#39;Object&#39;</td></tr><tr><td>currentTime</td><td>The current playback time</td><td>&#39;number&#39;</td></tr><tr><td>duration</td><td>Total duration of videos</td><td>&#39;number&#39;</td></tr><tr><td>tag</td><td>An example of the player</td><td>&#39;Element&#39;</td></tr></tbody></table><p>Where &#39;type&#39; type has</p><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>canplay</td><td>Your browser is ready to play the media file, but it probably doesn&#39;t have enough data to play it to the end without pausing to buffer the content further.</td></tr><tr><td>canplaythrough</td><td>The browser estimates that it canplay media until the end without stopping content buffering.</td></tr><tr><td>complete</td><td>OfflineAudioContext The rendering is complete.</td></tr><tr><td>durationchange</td><td>duration is triggered when the value of the duration property changes.</td></tr><tr><td>emptied</td><td>Media content emptied; For example, when the media is already loaded (or partially loaded), this event is sent and the load() method is called to reload it.</td></tr><tr><td>ended</td><td>The video stops playing because the media has reached the end point.</td></tr><tr><td>loadedmetadata</td><td>The metadata is loaded.</td></tr><tr><td>progress</td><td>is triggered periodically when the browser loads the resource.</td></tr><tr><td>ratechange</td><td>The play rate changes.</td></tr><tr><td>seeked</td><td>The seek operation is complete.</td></tr><tr><td>seeking</td><td>seek begins.</td></tr><tr><td>stalled</td><td>The user agent is trying to obtain media data but it has not appeared unexpectedly.</td></tr><tr><td>suspend</td><td>Media data loading has been suspended.</td></tr><tr><td>loadeddata</td><td>The first frame in media has been added. media has loaded.</td></tr><tr><td>timeupdate</td><td>The time specified by the currentTime property changes. currentTime attribute has changed.</td></tr><tr><td>volumechange</td><td>The volume changes.</td></tr><tr><td>waiting</td><td>Playing has stopped due to lack of data.</td></tr><tr><td>play</td><td>Playback has started.</td></tr><tr><td>playing</td><td>After a pause or delay due to lack of data, playback is ready to begin.</td></tr><tr><td>pause</td><td>Play is paused.</td></tr><tr><td>volume</td><td>The volume changes.</td></tr><tr><td>fullscreen</td><td>Triggers a full-screen event</td></tr></tbody></table>',26)]))}const m=e(i,[["render",n]]);export{u as __pageData,m as default};
