import{_ as i,o as a,c as e,a4 as l}from"./chunks/framework.BuqFyMr-.js";const c=JSON.parse('{"title":"克隆 Binaryen 仓库","description":"","frontmatter":{},"headers":[],"relativePath":"cn/src/note/libreoffice2wasm.md","filePath":"cn/src/note/libreoffice2wasm.md","lastUpdated":1726395965000}'),n={name:"cn/src/note/libreoffice2wasm.md"};function t(p,s,h,k,d,r){return a(),e("div",null,s[0]||(s[0]=[l(`<h2 id="项目地址" tabindex="-1">项目地址： <a class="header-anchor" href="#项目地址" aria-label="Permalink to &quot;项目地址：&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://git.libreoffice.org/core</span></span></code></pre></div><p>github 地址：<code>https://github.com/LibreOffice/core/blob/master/static/README.wasm.md</code></p><h2 id="容器化环境" tabindex="-1">容器化环境 <a class="header-anchor" href="#容器化环境" aria-label="Permalink to &quot;容器化环境&quot;">​</a></h2><p>由于是 <code>c/c++</code> 的项目，编译过程需要很多系统级别配置。如果当前设备不支持的话，不建议强行去适配。可以进行容器化处理。</p><p>比如用一个最常见的服务器系统：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span></span></code></pre></div><p>下载完成后，就可以去构建一个服务了：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 30105:30105</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name=alit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -itd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><p>构建并启动成功后，可以通过<code>docker container ls</code>去查看运行情况：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         PORTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      NAMES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">efd831ab0ba8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ubuntu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;/bin/bash&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   0.0.0.0:30105</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">30105/tcp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   alit</span></span></code></pre></div><p>再将项目移动到容器中：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alit:/home</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 总的来说，项目还是非常大的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Successfully copied 3.59GB to alit:/home</span></span></code></pre></div><p>进入容器，进行操作。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><p>这样，就可以把开发构建环境和电脑系统隔离开，防止一些系统级别不安全的操作了。</p><h2 id="安装必要的依赖" tabindex="-1">安装必要的依赖： <a class="header-anchor" href="#安装必要的依赖" aria-label="Permalink to &quot;安装必要的依赖：&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodejs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 遇到问题：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 执行</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./autogen.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">报错，提示</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to run aclocal at ./autogen.sh line 195.\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install automake</span></span></code></pre></div><p>安装完成后，执行<code>aclocal --version</code>或者<code>automake --version</code>检查是否安装完成</p><ol start="2"><li>执行 <code>./autogen.sh</code>遇到报错：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checking</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GNU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configure:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/usr/bin/make </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> needed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./autogen.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 323.</span></span></code></pre></div><p>通过 <code>make --version</code> 检查 make 的版本，执行 <code>brew install make</code>，再执行 <code>brew upgrade</code> 进行升级。确保 <code>make</code>的版本大于 <code>4.0</code></p><p>当使用 <code>brew</code> 安装 <code>GNU Make</code> 时，它通常会被命名为 <code>gmake</code> 而不是 <code>make</code> ，以区分于 <code>macOS</code> 系统自带的 <code>BSD Make</code>。如果你希望在使用 <code>make</code> 命令时实际上调用 <code>gmake</code> ，需要进行一些特殊处理来替换或设置别名。</p><p>在.zshrc 文件中添加如下行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Configure the brew installation of gmake, alias to make</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gmake&#39;</span></span></code></pre></div><p>然后，保存文件并重新加载配置文件（通过 <code>source ~/.zshrc</code> 或重新打开终端）。</p><p>在项目中搜索并替换成：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># args.makecmd = &#39;/usr/bin/make&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args.makecmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/opt/homebrew/bin/gmake&#39;</span></span></code></pre></div><p>在编译完成后，找到可执行的文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> soffice</span></span></code></pre></div><p>然后执行</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/core/instdir/program/soffice</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --headless</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --convert-to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pdf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/office/pptx.pptx</span></span></code></pre></div><p>将 LibreOffice 编译成 WebAssembly 并在 Web 上运行特定命令（如 soffice --headless --convert-to pdf /home/office/pptx.pptx）是一个复杂的任务。以下是一个大致的实现步骤和思路：</p><ol><li><p>编译 LibreOffice 为 WebAssembly 假设你已经成功编译了 LibreOffice 并生成了 .wasm 文件和相关的 JavaScript 文件。</p></li><li><p>创建 HTML 和 JavaScript 文件 创建一个 HTML 文件来加载 WebAssembly 模块，并编写 JavaScript 代码来调用 soffice 命令。</p></li></ol><p>HTML 文件 (index.html)</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doctype</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;LibreOffice WebAssembly&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libreoffice.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fileInput&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertToPDF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Convert to PDF&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JavaScript 文件 (main.js) // Initialize the Module var Module = { onRuntimeInitialized: function() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(&quot;LibreOffice WebAssembly Module Loaded&quot;); } }; // Function to convert file to PDF function convertToPDF() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var fileInput = document.getElementById(&#39;fileInput&#39;); if (fileInput.files.length == 0) { alert(&quot;Please select a file.&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">return; } var file = fileInput.files[0]; var reader = new FileReader(); reader.onload = function(event) { var</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arrayBuffer = event.target.result; var byteArray = new Uint8Array(arrayBuffer); // Write the file to the WASM virtual</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file system var filename = &#39;/home/office/&#39; + file.name; Module.FS_createDataFile(&#39;/&#39;, filename, byteArray, true, true);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// Call the soffice command var command = &#39;soffice --headless --convert-to pdf &#39; + filename; Module.ccall( &#39;system&#39;, //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name of C function &#39;number&#39;, // return type [&#39;string&#39;], // argument types [command] // arguments ); // Read the output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PDF file var outputFilename = &#39;/home/office/&#39; + file.name.replace(/\\.[^/.]+$/, &quot;&quot;) + &#39;.pdf&#39;; var output =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Module.FS_readFile(outputFilename); // Create a blob and a link to download the PDF var blob = new Blob([output], {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type: &#39;application/pdf&#39; }); var link = document.createElement(&#39;a&#39;); link.href = window.URL.createObjectURL(blob);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">link.download = file.name.replace(/\\.[^/.]+$/, &quot;&quot;) + &#39;.pdf&#39;; link.click(); }; reader.readAsArrayBuffer(file); }</span></span></code></pre></div><ol start="3"><li>部署和测试 将生成的 .wasm 文件、JavaScript 文件和 HTML 文件部署到你的 Web 服务器上，打开 index.html 文件，选择一个 PPTX 文件并点击“Convert to PDF”按钮。这个过程会：</li></ol><p>从文件输入中读取 PPTX 文件。 将文件写入 WebAssembly 模块的虚拟文件系统。 调用 soffice --headless --convert-to pdf 命令进行转换。 从虚拟文件系统中读取生成的 PDF 文件。 创建一个下载链接，允许用户下载生成的 PDF 文件。4. 注意事项 这个过程可能需要大量的内存和计算资源，可能需要优化和调整。 需要确保 Emscripten 的文件系统（MEMFS）能够正确处理大文件。 需要处理可能的错误和异常情况，并提供用户友好的错误提示。 通过这些步骤，你应该能够在 Web 上调用 soffice 命令并将 PPTX 文件转换为 PDF。如果遇到具体问题，请提供详细的错误信息，以便更好地帮助你解决问题。</p><p>减少 WebAssembly 文件的体积是一个常见的需求，尤其是在处理像 LibreOffice 这样的大型项目时。如果你只需要特定的功能（如将文件转换为 PDF），可以采取以下几种方法来减小生成的 WebAssembly 文件的体积：</p><ol><li><p>精简功能模块 确保只编译你需要的功能模块。你已经在 autogen.input 中指定了 --with-main-module=writer，这会限制编译的模块，但你可以进一步精简。</p></li><li><p>移除不必要的组件 在 autogen.input 中，进一步禁用不必要的组件和功能。例如：</p></li></ol><p>--disable-dbus --disable-odk --disable-postgresql-sdbc --disable-firebird-sdbc --disable-coinmp --disable-cve-tests --disable-gtk3 --disable-gstreamer-1-0 --disable-kf5 --disable-scripting-beanshell --disable-scripting-javascript --disable-extensions --disable-epm --disable-online-update --disable-python --disable-pdfimport --disable-lpsolve --disable-sdremote --disable-scripting --disable-avmedia --disable-coinmp --disable-report-builder --disable-odk --disable-pch --disable-skia --disable-scripting</p><ol><li>使用 Emscripten 优化选项 Emscripten 提供了多种优化选项，可以帮助减小生成的 WebAssembly 文件的体积：</li></ol><p>使用 -O3 或 -Oz 进行最大化优化。 使用 --closure 1 进行 JavaScript 代码的闭包优化。 使用 --llvm-lto 3 进行链接时间优化。 在编译时，确保使用这些选项：</p><p>emconfigure ./configure ... emmake make CXXFLAGS=&quot;-O3 --llvm-lto 3&quot; LDFLAGS=&quot;-O3 --llvm-lto 3&quot; 4. 移除调试信息 确保移除所有调试信息，这可以显著减小文件体积：</p><p>emconfigure ./configure ... emmake make CXXFLAGS=&quot;-O3 --llvm-lto 3 -g0&quot; LDFLAGS=&quot;-O3 --llvm-lto 3 -g0&quot; 5. 使用 WebAssembly Minifier 使用 WebAssembly Minifier 工具（如 wasm-opt）进一步优化和减小生成的 WebAssembly 文件：</p><p>wasm-opt -Oz -o optimized.wasm original.wasm 6. 自定义构建脚本 如果上述方法仍然不能满足需求，可以考虑编写自定义构建脚本，只包含必要的源文件和库，进一步精简生成的 WebAssembly 文件。</p><ol start="7"><li>动态加载模块 如果可能，将一些功能模块拆分为单独的 WebAssembly 文件，并在需要时动态加载，以减少初始加载的体积。</li></ol><p>示例 autogen.input 以下是一个示例 autogen.input 文件，结合了上述建议：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-debug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--enable-sal-log</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-crashdump</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wasm32-local-emscripten</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-gui</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--with-main-module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">writer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--with-package-format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">emscripten</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-dbus</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-odk</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-postgresql-sdbc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-firebird-sdbc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-coinmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-cve-tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-gtk3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-gstreamer-1-0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-kf5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-scripting-beanshell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-scripting-javascript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-extensions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-epm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-online-update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-python</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-pdfimport</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-lpsolve</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-sdremote</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-scripting</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-avmedia</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-coinmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-report-builder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-odk</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-pch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-skia</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--disable-scripting</span></span></code></pre></div><p>通过这些步骤，你应该能够显著减小生成的 WebAssembly 文件的体积，同时保留将文件转换为 PDF 的功能。如果遇到具体问题，请提供详细的错误信息，以便更好地帮助你解决问题。</p><p>wasm-opt 是 Binaryen 项目的一部分，它是一个用于优化和处理 WebAssembly 二进制文件的工具。你可以在 Ubuntu 上通过以下步骤安装和使用 wasm-opt：</p><ol><li>安装依赖项 首先，确保你的系统上已经安装了必要的依赖项：</li></ol><p>sudo apt update sudo apt install cmake build-essential git 2. 下载和编译 Binaryen 接下来，从源码编译 Binaryen：</p><h1 id="克隆-binaryen-仓库" tabindex="-1">克隆 Binaryen 仓库 <a class="header-anchor" href="#克隆-binaryen-仓库" aria-label="Permalink to &quot;克隆 Binaryen 仓库&quot;">​</a></h1><p>git clone <a href="https://github.com/WebAssembly/binaryen.git" target="_blank" rel="noreferrer">https://github.com/WebAssembly/binaryen.git</a> cd binaryen</p><h1 id="创建并进入构建目录" tabindex="-1">创建并进入构建目录 <a class="header-anchor" href="#创建并进入构建目录" aria-label="Permalink to &quot;创建并进入构建目录&quot;">​</a></h1><p>mkdir build cd build</p><h1 id="使用-cmake-配置构建" tabindex="-1">使用 CMake 配置构建 <a class="header-anchor" href="#使用-cmake-配置构建" aria-label="Permalink to &quot;使用 CMake 配置构建&quot;">​</a></h1><p>cmake ..</p><h1 id="编译-binaryen" tabindex="-1">编译 Binaryen <a class="header-anchor" href="#编译-binaryen" aria-label="Permalink to &quot;编译 Binaryen&quot;">​</a></h1><p>make</p><h1 id="安装-binaryen" tabindex="-1">安装 Binaryen <a class="header-anchor" href="#安装-binaryen" aria-label="Permalink to &quot;安装 Binaryen&quot;">​</a></h1><p>sudo make install 3. 使用 wasm-opt 安装完成后，你可以使用 wasm-opt 命令来优化 WebAssembly 文件。例如：</p><h1 id="假设你有一个名为-original-wasm-的-webassembly-文件" tabindex="-1">假设你有一个名为 original.wasm 的 WebAssembly 文件 <a class="header-anchor" href="#假设你有一个名为-original-wasm-的-webassembly-文件" aria-label="Permalink to &quot;假设你有一个名为 original.wasm 的 WebAssembly 文件&quot;">​</a></h1><p>wasm-opt -Oz -o optimized.wasm original.wasm 在这个命令中：</p><p>-Oz 表示进行最大化的尺寸优化。 -o optimized.wasm 指定输出文件名为 optimized.wasm。 original.wasm 是输入的 WebAssembly 文件。4. 验证安装 你可以通过运行以下命令来验证 wasm-opt 是否正确安装：</p><p>wasm-opt --version 这将输出 wasm-opt 的版本信息，确认它已成功安装并可以使用。</p><p>示例 假设你有一个名为 example.wasm 的 WebAssembly 文件，你可以通过以下命令优化它：</p><p>wasm-opt -Oz -o example_optimized.wasm example.wasm 这将生成一个优化后的 WebAssembly 文件 example_optimized.wasm，其体积通常会显著减小。</p><p>通过这些步骤，你应该能够在 Ubuntu 上成功安装和使用 wasm-opt 来优化你的 WebAssembly 文件。如果在安装或使用过程中遇到任何问题，请提供详细的错误信息，以便进一步帮助你解决问题。</p><p>--disable-debug --enable-sal-log --disable-crashdump --host=wasm32-local-emscripten --disable-gui --with-main-module=writer --with-package-format=emscripten --disable-dbus --disable-odk --disable-postgresql-sdbc --disable-firebird-sdbc --disable-coinmp --disable-cve-tests --disable-gtk3 --disable-gstreamer-1-0 --disable-kf5 --disable-scripting-beanshell --disable-scripting-javascript --disable-extensions --disable-epm --disable-online-update --disable-python --disable-pdfimport --disable-lpsolve --disable-sdremote --disable-scripting --disable-avmedia --disable-coinmp --disable-report-builder --disable-odk --disable-pch --disable-skia --disable-scripting</p><p>步骤 1：下载最新的 OpenSSL 源代码 首先，确保你在一个干净的目录中，然后下载最新版本的 OpenSSL 源代码。你可以访问 OpenSSL 官方网站 查看最新版本。假设最新版本是 openssl-3.0.9：</p><p>wget <a href="https://www.openssl.org/source/openssl-3.0.9.tar.gz" target="_blank" rel="noreferrer">https://www.openssl.org/source/openssl-3.0.9.tar.gz</a> tar -xzvf openssl-3.0.9.tar.gz cd openssl-3.0.9 步骤 2：编译和安装 OpenSSL 接下来，编译并安装 OpenSSL：</p><p>./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib make make test make install 步骤 3：确认 OpenSSL 安装路径 确保 OpenSSL 的头文件和库文件已正确安装：</p><p>ls /usr/local/ssl/include ls /usr/local/ssl/lib 步骤 4：设置环境变量 设置正确的环境变量，以便编译时能找到 OpenSSL：</p><p>export PKG_CONFIG_PATH=&quot;/usr/local/ssl/lib/pkgconfig&quot; export CFLAGS=&quot;-I/usr/local/ssl/include&quot; export LDFLAGS=&quot;-L/usr/local/ssl/lib -lssl -lcrypto&quot; 步骤 5：清理之前的配置 在重新运行 configure 脚本之前，清理之前的配置：</p><p>make clean 步骤 6：重新运行 configure 脚本 重新运行 configure 脚本，以确保它能找到新的 OpenSSL 版本：</p><p>emconfigure ./configure --disable-debug --enable-sal-log --disable-crashdump --host=wasm32-local-emscripten --disable-gui --with-main-module=writer --with-package-format=emscripten --disable-dbus --disable-odk --disable-postgresql-sdbc --disable-firebird-sdbc --disable-coinmp --disable-cve-tests --disable-gtk3 --disable-gstreamer-1-0 --disable-kf5 --disable-scripting-beanshell --disable-scripting-javascript --disable-extensions --disable-epm --disable-online-update --disable-python --disable-pdfimport --disable-lpsolve --disable-sdremote --disable-scripting --disable-avmedia --disable-coinmp --disable-report-builder --disable-odk --disable-pch --disable-skia --disable-scripting --srcdir=/home/core --enable-option-checking=fatal --disable-pthreads 步骤 7：检查 config.log 如果配置仍然失败，请检查 config.log 文件以获取更多详细信息：</p><p>cat config.log | grep openssl 通过确保 OpenSSL 已正确安装并设置正确的环境变量，我们应该能够解决配置过程中遇到的问题。如果问题仍然存在，请提供 config.log 文件中与 OpenSSL 相关的更多详细信息，以便进一步诊断和解决问题。</p><p>emconfigure ./configure --disable-debug --enable-sal-log --disable-crashdump --host=wasm32-local-emscripten --disable-gui --with-main-module=writer --with-package-format=emscripten --disable-dbus --disable-odk --disable-postgresql-sdbc --disable-firebird-sdbc --disable-coinmp --disable-cve-tests --disable-gtk3 --disable-gstreamer-1-0 --disable-kf5 --disable-scripting-beanshell --disable-scripting-javascript --disable-extensions --disable-epm --disable-online-update --disable-python --disable-pdfimport --disable-lpsolve --disable-sdremote --disable-scripting --disable-avmedia --disable-coinmp --disable-report-builder --disable-odk --disable-pch --disable-skia --disable-scripting --srcdir=/home/core --enable-option-checking=fatal</p><p>emmake make CXXFLAGS=&quot;-I/usr/local/ssl/include -O3 -g0 -msimd128&quot; LDFLAGS=&quot;-L/usr/local/ssl/lib -lssl -lcrypto -O3 -g0&quot;</p><p>emconfigure ./configure --disable-cups --disable-dbus --without-system-fontconfig --with-system-zlib --disable-dynamic-loading --disable-gui CXXFLAGS=-std=c++20 --host=wasm32-unknown-emscripten</p><p>root@8cb3480a4441:/home/core/instsetoo_native# vim CustomTarget_emscripten-install.mk</p><p>使用 file_packager.py 工具将文件预加载到虚拟文件系统中。确保 Emscripten 的环境变量已经正确设置，然后运行以下命令：</p><p>python3 /home/emsdk/upstream/emscripten/tools/file_packager.py preload.data --preload /home/core/instdir/share@/instdir/share --js-output=preload.js</p>`,85)]))}const g=i(n,[["render",t]]);export{c as __pageData,g as default};
