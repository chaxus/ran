import{_ as e,o as t,c as r,a3 as s}from"./chunks/framework.BYE6xntm.js";const u=JSON.parse('{"title":"如何处理一个系统设计","description":"","frontmatter":{},"headers":[],"relativePath":"cn/src/article/systemDesign.md","filePath":"cn/src/article/systemDesign.md","lastUpdated":1728827378000}'),o={name:"cn/src/article/systemDesign.md"};function i(n,a,l,p,c,d){return t(),r("div",{"data-pagefind-body":!0},a[0]||(a[0]=[s('<h1 id="如何处理一个系统设计" tabindex="-1">如何处理一个系统设计 <a class="header-anchor" href="#如何处理一个系统设计" aria-label="Permalink to &quot;如何处理一个系统设计&quot;">​</a></h1><p>系统设计是一个开放式的对话。他们期望你去主导这个对话。</p><p>你可以使用下面的步骤来指引讨论。为了巩固这个过程，请使用下面的步骤完成系统设计的面试题和解答这个章节。</p><h2 id="第一步-描述使用场景-约束和假设" tabindex="-1">第一步：描述使用场景，约束和假设 <a class="header-anchor" href="#第一步-描述使用场景-约束和假设" aria-label="Permalink to &quot;第一步：描述使用场景，约束和假设&quot;">​</a></h2><p>把所有需要的东西聚集在一起，审视问题。不停的提问，以至于我们可以明确使用场景和约束。讨论假设。</p><p>谁会使用它？ 他们会怎样使用它？ 有多少用户？ 系统的作用是什么？ 系统的输入输出分别是什么？ 我们希望处理多少数据？ 我们希望每秒钟处理多少请求？ 我们希望的读写比率？</p><h2 id="第二步-创造一个高层级的设计" tabindex="-1">第二步：创造一个高层级的设计 <a class="header-anchor" href="#第二步-创造一个高层级的设计" aria-label="Permalink to &quot;第二步：创造一个高层级的设计&quot;">​</a></h2><p>使用所有重要的组件来描绘出一个高层级的设计。</p><p>画出主要的组件和连接 证明你的想法</p><h2 id="第三步-设计核心组件" tabindex="-1">第三步：设计核心组件 <a class="header-anchor" href="#第三步-设计核心组件" aria-label="Permalink to &quot;第三步：设计核心组件&quot;">​</a></h2><p>对每一个核心组件进行详细深入的分析。举例来说，如果你被问到设计一个 url 缩写服务，开始讨论：</p><p>生成并储存一个完整 url 的 hash MD5 和 Base62 Hash 碰撞 SQL 还是 NoSQL 数据库模型 将一个 hashed url 翻译成完整的 url 数据库查找 API 和面向对象设计</p><h2 id="第四步-扩展设计" tabindex="-1">第四步：扩展设计 <a class="header-anchor" href="#第四步-扩展设计" aria-label="Permalink to &quot;第四步：扩展设计&quot;">​</a></h2><p>确认和处理瓶颈以及一些限制。举例来说就是你需要下面的这些来完成扩展性的议题吗？</p><p>负载均衡 水平扩展 缓存 数据库分片 论述可能的解决办法和代价。每件事情需要取舍。可以使用可扩展系统的设计原则来处理瓶颈。</p>',15)]))}const m=e(o,[["render",i]]);export{u as __pageData,m as default};
